sum is a function which takes a slice of numbers and adds them together. What would its function signature look like in Go?

//// func sum(xs []float64) float64

Write a function which takes an integer and halves it and returns true if it was even or false if it was odd. For example half(1) should return (0, false) and half(2) should return (1, true).

////
func half(n int) (int, bool) {
    if n % 2 == 0 {
        return (n/2, true)
    }
    return (0, false)
}
////

Write a function with one variadic parameter that finds the greatest number in a list of numbers.

////
func largest(numbers ...int) int {
    largest := 0
    for _, v := range args {
        if v > largest {
            largest = v
        }
    }
    return largest
}
////

Using makeEvenGenerator as an example, write a makeOddGenerator function that generates odd numbers.

////
func makeOddGenerator() func() uint {
    i := uint(1)
    return func() (ret uint) {
        ret = i
        i += 2
        return
    }
}
////

The Fibonacci sequence is defined as: fib(0) = 0, fib(1) = 1, fib(n) = fib(n-1) + fib(n-2). Write a recursive function which can find fib(n).

////
func fib(n int) int {
    if n == 0 || n == 1 {
        return n
    }
    return fib(n-1) + fib(n-2)
}
////

What are defer, panic and recover? How do you recover from a run-time panic?

//// defer is used to defer a function call to the end of the current function
//// panic throws a run-time error
//// recover lets you define a function that will handle the message thrown by panic